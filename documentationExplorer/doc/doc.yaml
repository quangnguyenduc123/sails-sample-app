---
swagger: "2.0"

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: "1.0"
  title: AMC-Backend
  description: API
# during dev, should point to your local machine
host: "localhost:3000"
# basePath prefixes all resource paths
basePath: /v1
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

################################################################################
#                                  Security                                    #
################################################################################

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: "Users login JWT with Bearer prefix. Example: Bearer <JWT>"

################################################################################
#                                           Paths                              #
################################################################################

paths:
  /users/signup:
    post:
      security:
        - Bearer: []
      tags:
        - User
      summary: Add new user.
      description: "Requires logged in user to be super_admin."
      operationId: signUp
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object that needs to be added to the users.
          required: true
          schema:
            $ref: "#/definitions/UserAttributes"
      responses:
        "201":
          description: User signed up.
          schema:
            $ref: "#/definitions/UserResponseWithToken"


  /users/signin:
    post:
      tags:
        - User
      summary: Sign in.
      description: "Sign in."
      operationId: signIn
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User credentials for sign in.
          required: true
          schema:
            $ref: "#/definitions/UserSignInCredentials"
      responses:
        "201":
          description: User signed up.
          schema:
            $ref: "#/definitions/UserResponseWithToken"

  /users/refresh_token:
    get:
      security:
        - Bearer: []
      tags:
        - User
      summary: Refresh login token..
      description: "Gets new login token."
      operationId: refreshToken
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: User signed up.
          schema:
            $ref: "#/definitions/UserResponseWithToken"

  /users:
    get:
      security:
        - Bearer: []
      tags:
        - User
      summary: Get all users.
      operationId: getUsers
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: All users.
          schema:
            $ref: "#/definitions/UsersResponse"

  /users/{id}:
    put:
      security:
        - Bearer: []
      tags:
        - User
      summary: Update user.
      description: "Requires logged in user to be super_admin."
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the user that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Attributes and values that will be updated.
          required: true
          schema:
            $ref: "#/definitions/UserAttributes"
      responses:
        "200":
          description: User updated.
          schema:
            $ref: "#/definitions/UserResponse"

    delete:
      security:
        - Bearer: []
      tags:
        - User
      summary: Delete user.
      description: "Requires logged in user to be super_admin."
      operationId: deleteUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the user that needs to be deleted.
          required: true
          type: string
      responses:
        "200":
          description: User deleted.
          schema:
            $ref: "#/definitions/UserResponse"

  /notifications:
    post:
      security:
        - Bearer: []
      tags:
        - Notification
      summary: Add new notification.
      description: "Requires logged in user to be super_admin."
      operationId: addNotification
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Notification object that needs to be added to the contracts.
          required: true
          schema:
            $ref: "#/definitions/NotificationAttributes"
      responses:
        "201":
          description: New notification.
          schema:
            $ref: "#/definitions/NotificationResponse"

  /contracts:
    get:
      security:
        - Bearer: []
      tags:
        - Contract
      summary: Get contracts.
      description: Super admin gets all contracts. Shop admin contracts from the users in his shop. User gets his contracts.
      operationId: getContracts
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: All users.
          schema:
            $ref: "#/definitions/ContractsResponse"
    post:
      security:
        - Bearer: []
      tags:
        - Contract
      summary: Add new contract.
      operationId: addContract
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Contract object that needs to be added to the contracts.
          required: true
          schema:
            $ref: "#/definitions/ContractAttributes"
      responses:
        "201":
          description: New contract.
          schema:
            $ref: "#/definitions/ContractResponse"

  /contracts/{id}:
    delete:
      security:
        - Bearer: []
      tags:
        - Contract
      summary: Delete contract.
      description: "Requires logged in user to be super_admin."
      operationId: deleteContract
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the contract that needs to be deleted.
          required: true
          type: string
      responses:
        "200":
          description: Contract deleted.
          schema:
            $ref: "#/definitions/ContractResponse"

    put:
      security:
        - Bearer: []
      tags:
        - Contract
      summary: Update contract.
      description: "Only super admin can modify active field. Shop admin can modify contracts of users from his own shop. User can modify only his contracts."
      operationId: updateContract
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the contract that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Attributes and values that will be updated.
          required: true
          schema:
            $ref: "#/definitions/ContractUpdateAttributes"
      responses:
        "200":
          description: User updated.
          schema:
            $ref: "#/definitions/ContractResponse"

  /packages:
    get:
      security:
        - Bearer: []
      tags:
        - Package
      summary: Get packages..
      description: "Requires logged in user to be super_admin."
      operationId: getPackages
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: All users.
          schema:
            $ref: "#/definitions/PackagesResponse"
    post:
      security:
        - Bearer: []
      tags:
        - Package
      summary: Add new package.
      description: "Requires logged in user to be super_admin."
      operationId: createPackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Package object that needs to be added to the packages.
          required: true
          schema:
            $ref: "#/definitions/PackageAttributes"
      responses:
        "201":
          description: Package created.
          schema:
            $ref: "#/definitions/PackageResponse"

  /packages/{id}:
    put:
      security:
        - Bearer: []
      tags:
        - Package
      summary: Update contract.
      description: "Requires logged in user to be super_admin."
      operationId: updatePackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the package that needs to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Attributes and values that will be updated.
          required: true
          schema:
            $ref: "#/definitions/PackageAttributes"
      responses:
        "200":
          description: User updated.
          schema:
            $ref: "#/definitions/PackageResponse"

    delete:
      security:
        - Bearer: []
      tags:
        - Package
      summary: Delete package.
      description: "Requires logged in user to be super_admin."
      operationId: deletePackage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the package that needs to be deleted.
          required: true
          type: string
      responses:
        "200":
          description: Package deleted.
          schema:
            $ref: "#/definitions/PackageResponse"

  /contract_usages:
    post:
      security:
        - Bearer: []
      tags:
        - ContractUsage
      summary: Add new package.
      description: "Requires logged in user to be super_admin."
      operationId: createContractUsages
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Package object that needs to be added to the packages.
          required: true
          schema:
            $ref: "#/definitions/ContractUsageAttributes"
      responses:
        "201":
          description: Package created.
          schema:
            $ref: "#/definitions/ContractUsageResponse"

  /contract_usages/{id}:
   delete:
      security:
        - Bearer: []
      tags:
        - ContractUsage
      summary: Delete contract usage.
      description: "Requires logged in user to be super_admin."
      operationId: deleteContractUsage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the contract usage that needs to be deleted.
          required: true
          type: string
      responses:
        "200":
          description: Contract usage deleted.
          schema:
            $ref: "#/definitions/ContractUsageResponse"
################################################################################
#                                 Definitions                                  #
################################################################################

definitions:
  UserSignInCredentials:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string

  UsersResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/UsersResponseData"

  UsersResponseData:
    type: object
    required:
      - users
    properties:
      users:
        type: array
        items:
           $ref: "#/definitions/UserObject"

  UserResponseWithToken:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/UserResponseDataWithToken"

  UserResponseDataWithToken:
    type: object
    required:
      - token
    properties:
      token:
        type: string
        description: JWT login token.
      user:
        $ref: "#/definitions/UserObject"

  NotificationResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/NotificationResponseData"

  NotificationResponseData:
    type: object
    required:
      - notification
    properties:
      notification:
        $ref: "#/definitions/NotificationObject"

  ContractResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/ContractResponseData"

  ContractResponseData:
    type: object
    required:
      - contract
    properties:
      contract:
        $ref: "#/definitions/ContractObject"

  ContractsResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/ContractsResponseData"

  ContractsResponseData:
    type: object
    required:
      - contracts
    properties:
      contracts:
        type: array
        items:
          $ref: "#/definitions/ContractObject"

  PackageResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/PackageResponseData"

  PackageResponseData:
    type: object
    required:
      - package
    properties:
      package:
        $ref: "#/definitions/PackageObject"

  PackagesResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/PackagesResponseData"

  PackagesResponseData:
    type: object
    required:
      - package
    properties:
      package:
        type: array
        items:
          $ref: "#/definitions/PackageObject"

  ContractUsageResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/ContractUsageResponseData"

  ContractUsageResponseData:
    type: object
    required:
      - package
    properties:
      package:
        type: array
        items:
          $ref: "#/definitions/ContractUsageObject"


  UserResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        enum: ['success']
      data:
        $ref: "#/definitions/UserResponseData"

  UserResponseData:
    type: object
    required:
      - user
    properties:
      user:
        $ref: "#/definitions/UserObject"

  UserObject:
    type: object
    required:
      - id
      - username
      - name
      - role
      - password
      - email
      - is_europe
      - shop
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
        enum: ['super_admin', 'shop_admin', 'user']
      email:
        type: string
      is_europe:
        type: boolean
      shop:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
  UserAttributes:
    type: object
    required:
      - username
      - name
      - role
      - password
      - email
      - is_europe
      - shop
    properties:
      username:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
        enum: ['super_admin', 'shop_admin', 'user']
      email:
        type: string
      is_europe:
        type: boolean
      shop:
        type: string

  NotificationAttributes:
    type: object
    required:
      - user_id
      - message
    properties:
      user_id:
        type: integer
      message:
        type: string

  ContractAttributes:
    type: object
    required:
      - name
      - email
      - jmbg
      - phone_number
      - address
      - licence_plate
      - vehicle
      - vehicle_type
      - chassie_number
      - lenght
      - active
      - expiration_date
      - is_europe
      - package_id
    properties:
      name:
        type: string
      email:
        type: string
      jmbg:
        type: string
      phone_number:
        type: string
      address:
        type: string
      licence_plate:
        type: string
      vehicle:
        type: string
      vehicle_type:
        type: string
      chassie_number:
        type: string
      lenght:
        type: integer
      active:
        type: boolean
      expiration_date:
        type: string
      is_europe:
        type: boolean
      package_id:
        type: integer

  ContractUpdateAttributes:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      jmbg:
        type: string
      phone_number:
        type: string
      address:
        type: string
      licence_plate:
        type: string
      vehicle:
        type: string
      vehicle_type:
        type: string
      chassie_number:
        type: string
      lenght:
        type: integer
      active:
        type: boolean
      expiration_date:
        type: string
      is_europe:
        type: boolean
      package_id:
        type: integer

  NotificationObject:
    type: object
    required:
      - id
      - user_id
      - message
      - seen
      - createdAt
      - updatedAt
    properties:
      id:
        type: integer
      user_id:
        type: integer
      message:
        type: string
      seen:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string

  ContractObject:
    type: object
    required:
      - id
      - contract_number
      - name
      - email
      - jmbg
      - phone_number
      - address
      - licence_plate
      - vehicle
      - vehicle_type
      - chassie_number
      - lenght
      - active
      - expiration_date
      - is_europe
      - user_id
      - package_id
      - createdAt
      - updatedAt
    properties:
      id:
        type: string
      contract_number:
        type: string
      name:
        type: string
      email:
        type: string
      jmbg:
        type: string
      phone_number:
        type: string
      address:
        type: string
      licence_plate:
        type: string
      vehicle:
        type: string
      vehicle_type:
        type: string
      chassie_number:
        type: string
      lenght:
        type: integer
      active:
        type: boolean
      expiration_date:
        type: string
      is_europe:
        type: boolean
      user_id:
        type: integer
      package_id:
        type: integer
      createdAt:
        type: string
      updatedAt:
        type: string

  PackageObject:
    type: object
    required:
      - id
      - name
      - price
      - total_usage
      - is_active
      - is_europe
      - createdAt
      - updatedAt
    properties:
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      total_usage:
        type: integer
      is_active:
        type: boolean
      is_europe:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string

  ContractUsageObject:
    type: object
    required:
      - id
      - contract_id
      - usage_date
      - comment
    properties:
      id:
        type: integer
      contract_id:
        type: integer
      usage_date:
        type: string
      comment:
        type: string

  PackageAttributes:
    type: object
    required:
      - name
      - price
      - total_usage
      - is_active
      - is_europe
    properties:
      name:
        type: string
      price:
        type: number
      total_usage:
        type: integer
      is_active:
        type: boolean
      is_europe:
        type: boolean

  ContractUsageAttributes:
    type: object
    required:
      - contract_id
    properties:
      contract_id:
        type: integer
      comment:
        type: string
